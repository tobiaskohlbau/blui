on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

name: Release

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build-and-upload:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-linux
            artifact_name: blui-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-linux
            artifact_name: blui-linux-aarch64
          - os: macos-latest
            target: x86_64-macos
            artifact_name: blui-macos-x86_64
          - os: macos-latest
            target: aarch64-macos
            artifact_name: blui-macos-aarch64
          - os: windows-latest
            target: x86_64-windows
            artifact_name: blui-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup build environment (Linux/macOS)
        if: runner.os != 'Windows'
        uses: cachix/install-nix-action@fd24c48048070c1be9acd18c9d369a83f0fe94d7 # v31.8.1
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install zig (Windows)
        if: runner.os == 'Windows'
        uses: mlugg/setup-zig@8d6198c65fb0feaa111df26e6b467fea8345e46f  # v2.0.5

      - name: Install pnpm (Windows)
        if: runner.os == 'Windows'
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 10

      - name: Build UI (Linux/macOS)
        if: runner.os != 'Windows'
        run: nix develop --command bash -c "cd ui && pnpm install && pnpm run build"

      - name: Build UI (Windows)
        if: runner.os == 'Windows'
        run: cd ui && pnpm install && pnpm run build

      - name: Build binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          nix develop -c zig build -Dtarget=${{ matrix.target }} -Doptimize=ReleaseSafe
          cp zig-out/bin/blui ${{ matrix.artifact_name }}

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        run: |
          zig build -Dtarget=${{ matrix.target }} -Doptimize=ReleaseSafe
          cp zig-out/bin/blui.exe ${{ matrix.artifact_name }}

      - name: Install minisign
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y minisign
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew install minisign
          elif [ "$RUNNER_OS" = "Windows" ]; then
            choco install minisign -y
          fi
        shell: bash

      - name: Sign binary
        env:
          MINISIGN_KEY: ${{ secrets.MINISIGN_KEY }}
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}
        run: |
          echo "$MINISIGN_KEY" > minisign.key
          echo "$MINISIGN_PASSWORD" | minisign -S -s minisign.key -m ${{ matrix.artifact_name }} -x ${{ matrix.artifact_name }}.minisig
          rm minisign.key
        shell: bash

      - name: Upload Release Asset
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream

      - name: Upload Signature
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.minisig
          asset_name: ${{ matrix.artifact_name }}.minisig
          asset_content_type: text/plain

      - name: Generate checksums
        if: runner.os == 'Linux' && matrix.target == 'x86_64-linux'
        run: |
          sha256sum ${{ matrix.artifact_name }} > ${{ matrix.artifact_name }}.sha256
        shell: bash

      - name: Upload Checksum
        if: runner.os == 'Linux' && matrix.target == 'x86_64-linux'
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.sha256
          asset_name: ${{ matrix.artifact_name }}.sha256
          asset_content_type: text/plain
